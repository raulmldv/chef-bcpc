###############################################################################
#                           generated by ansible
###############################################################################

# Increase ephermeral IP ports
net.ipv4.ip_local_port_range = 10000 64999

# Reserve additional ports
{% set default_reserved = [10050,10051,11211,15672,16509,16514,25672,35357,35358,55672] -%}
{% set reserved_set = default_reserved + (system_additional_reserved_ports | map('int') | list) -%}
net.ipv4.ip_local_reserved_ports = {{ ','.join(reserved_set | sort | map('string')) }}

# Increase Linux autotuning TCP buffer limits
# Set max to 16MB for 1GE and 54M (56623104) for 10GE
# Don't set tcp_mem itself! Let the kernel scale it based on RAM.
net.core.rmem_max = 56623104
net.core.wmem_max = 56623104
net.core.rmem_default = 56623104
net.core.wmem_default = 56623104
net.core.optmem_max = 40960
net.ipv4.tcp_rmem = 4096 87380 56623104
net.ipv4.tcp_wmem = 4096 65536 56623104

# Make room for more TIME_WAIT sockets due to more clients,
# and allow them to be reused if we run out of sockets
# Also increase the max packet backlog
net.core.netdev_max_backlog = 50000
net.ipv4.tcp_max_syn_backlog = 30000
net.ipv4.tcp_max_tw_buckets = 2000000
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_fin_timeout = 10

# Disable TCP slow start on idle connections
net.ipv4.tcp_slow_start_after_idle = 0

# If your servers talk UDP, also up these limits
net.ipv4.udp_rmem_min = 8192
net.ipv4.udp_wmem_min = 8192

# Set keepalive timeout for TCP
net.ipv4.tcp_keepalive_time=1800

# Enable binding to non-local IP addresses
net.ipv4.ip_nonlocal_bind=1

# reduce number of TCP retransmission timeouts required to drop a connection
# so that connections fall away in ~100 seconds instead of the default of
# 15, which times out at ~924s
net.ipv4.tcp_retries2 = 8

# Avoid swapping
vm.swappiness = 0
vm.min_free_kbytes = 135168

# Customized parameters
{% set sysctl_parameters = vars | dict2items | selectattr('key', 'match', '^system_parameters_') | list | items2dict -%}
{% if sysctl_parameters | length > 0 -%}
{% for key, value in sysctl_parameters.items() | sort -%}
{{ key | regex_replace('^system_parameters_', '') }} = {{ value }}
{% endfor -%}
{% endif -%}
