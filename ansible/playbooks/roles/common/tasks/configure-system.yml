# Define Ansible virtualization facts
- name: Define Ansible virtualization facts
  setup:
    gather_subset: "!all,!min,virtual"

# IPMI module configuration and loading
- name: Configure the kernel's IPMI module
  block:
    - name: Load ipmi_devintf kernel module
      modprobe:
        name: ipmi_devintf

    - name: Ensure ipmi_devintf is loaded at boot
      template:
        src: system/modules-load.conf.j2
        dest: /etc/modules-load.d/ipmi_devintf.conf
        owner: root
        group: root
        mode: '0644'
      vars:
        kernel_module_name: ipmi_devintf
  when: ansible_virtualization_role == "NA"

# ip_conntrack module configuration and loading
- name: Configure ip_conntrack kernel module when loaded
  template:
    src: system/modprobe.conf.j2
    dest: /etc/modprobe.d/nf_conntrack.conf
    owner: root
    group: root
    mode: '0644'
  vars:
    kernel_module_name: ip_conntrack
    kernel_module_options:
      hashsize: "{{ vars['system_parameters_net.nf_conntrack_max'] // 8 }}"

- name: Load nf_conntrack (ip_conntrack) kernel module
  modprobe:
    name: nf_conntrack

- name: Configure ip_conntrack kernel module hashsize setting
  template:
    src: system/sysfs_variable.j2
    dest: /sys/module/nf_conntrack/parameters/hashsize
    owner: root
    group: root
    mode: '0600'
    unsafe_writes: yes
  vars:
    value: "{{ vars['system_parameters_net.nf_conntrack_max'] // 8 }}"

- name: Ensure ip_conntrack is loaded at boot
  template:
    src: system/modules-load.conf.j2
    dest: /etc/modules-load.d/ip_conntrack.conf
    owner: root
    group: root
    mode: '0644'
  vars:
    kernel_module_name: ip_conntrack

# Configure grub
- name: Configure grub
  template:
    src: grub/default.j2
    dest: /etc/default/grub
    owner: root
    group: root
    mode: '0644'
  register: grub_defaults

- name: Run update-grub
  command: update-grub
  when: grub_defaults.changed  # noqa no-handler

# Ensure elevator changes are effective
- name: Gather a list of hardware/block devices
  setup:
    gather_subset:
      - '!all'
      - '!any'
      - hardware

- name: Check current block device I/O scheduler settings
  shell: "grep -E '( |^){{ hardware_io_scheduler }}( |$)' /sys/block/{{ item }}/queue/scheduler"
  with_items: "{{ ansible_facts.devices | select('match', '^sd') | list }}"
  register: block_device_schedulers
  failed_when: block_device_schedulers.rc == 0
  ignore_errors: true
  changed_when: false

- name: Apply I/O scheduler settings to block devices
  shell: "echo {{ hardware_io_scheduler }} > /sys/block/{{ item.item }}/queue/scheduler"
  when: item is failed
  with_items: "{{ block_device_schedulers.results }}"

# Configure sysctl parameters
- name: Configure sysctl parameters
  template:
    src: sysctl/bcpc.conf.j2
    dest: /etc/sysctl.d/70-bcpc.conf
    owner: root
    group: root
    mode: '0644'
  register: sysctl_bcpc

- name: Reload sysctl settings
  command: sysctl -p /etc/sysctl.d/70-bcpc.conf
  when: sysctl_bcpc.changed  # noqa no-handler

# Configure I/O scheduler algorithm
- name: Configure disk scheduler algorithm
  template:
    src: udev/98-io-scheduler.rules.j2
    dest: /etc/udev/rules.d/98-io-scheduler.rules
    owner: root
    group: root
    mode: '0644'
  register: udev_io_scheduler

# Configure block device readahead
- name: Configure block device readahead
  template:
    src: udev/99-readahead.rules.j2
    dest: /etc/udev/rules.d/99-readahead.rules
    owner: root
    group: root
    mode: '0644'
  register: udev_readahead

- name: Reload udevadm rules
  command: udevadm control --reload-rules
  when: udev_io_scheduler.changed or udev_readahead.changed  # noqa no-handler

- name: Replay udev events
  command: udevadm trigger
  when: udev_io_scheduler.changed or udev_readahead.changed  # noqa no-handler

# Configure /etc/updatedb.conf
- name: Configure /etc/updatedb.conf
  copy:
    src: files/updatedb/conf
    dest: /etc/updatedb.conf
    owner: root
    group: root
    mode: '0644'

# Stop and disable unused services
- name: Configure system services
  service:
    name: "{{ item }}"
    enabled: no
    state: stopped
  with_items:
    - iscsid
    - lxcfs
    - lxd
    - rpcbind
    - snapd
  ignore_errors: yes  # noqa ignore-errors
  when: ansible_distribution_version == "18.04"

- name: Stop and disable unused services
  service:
    name: "{{ item }}"
    enabled: no
    state: stopped
  with_items:
    - accounts-daemon
    - atd
    - fwupd
    - multipathd.socket
    - multipathd
    - packagekit
    - polkit
    - snapd.socket
    - snapd
    - snapd.seeded
    - udisks2
    - upower
  ignore_errors: yes # noqa ignore-errors
  when: ansible_distribution_version == "20.04"

# Purge some Ubuntu packages
- name: Purge undesirable packages
  apt:
    name: "{{ item }}"
    purge: yes
    state: absent
  with_items:
    - ubuntu-advantage-tools
    - update-notifier-common
    - ubuntu-release-upgrader-core
  when: ansible_distribution_version == "18.04"

# Purge some Ubuntu stock packages we don't need
- name: Purge unused service packages
  apt:
    name: "{{ item }}"
    purge: yes
    state: absent
  with_items:
    - accountsservice
    - at
    - fwupd
    - fwupd-signed
    - multipath-tools
    - packagekit
    - packagekit-tools
    - policykit-1
    - snapd
    - ubuntu-advantage-tools
    - update-notifier-common
    - ubuntu-release-upgrader-core
    - udisks2
    - upower
  when: ansible_distribution_version == "20.04"

# Purge off dependencies of uneeded packages
- name: Purge unused packages
  apt:
    autoremove: yes
    purge: yes
  when: ansible_distribution_version == "20.04"

# Configure motd-news
- name: Configure motd-news
  template:
    src: system/motd-news.j2
    dest: /etc/default/motd-news
    owner: root
    group: root
    mode: '0644'
  vars:
   enabled: false

# Configure system kernel
- name: Configure system kernel
  apt:
    name: "{{ item }}"
  when: not kernel_pin_version
  with_items:
    - "linux-{{ kernel_variant }}"
    - "linux-tools-{{ kernel_variant }}"

- name: Configure versioned system kernel
  apt:
    name: "{{ item }}"
  when: kernel_pin_version
  with_items:
    - "linux-headers-{{ kernel_version }}-{{ kernel_variant }}"
    - "linux-image-{{ kernel_version }}-{{ kernel_variant }}"
    - "linux-modules-{{ kernel_version }}-{{ kernel_variant }}"
    - "linux-modules-extra-{{ kernel_version }}-{{ kernel_variant }}"
    # HWE kernel-specific tools are pulled in by {{ version }}-generic metapackages.
    - "linux-tools-{{ kernel_version }}-{{ 'generic' if kernel_variant != 'lowlatency' else 'lowlatency' }}"

# Install kexec-tools
- name: Install kexec-tools
  apt:
    name: kexec-tools

# Control processor microcode application
- name: Control processor microcode application
  block:
    - name: Check if AMD processor
      command: grep -q AuthenticAMD /proc/cpuinfo
      ignore_errors: true
      register: is_amd
      changed_when: false

    - name: Install amd64-microcode package
      apt:
        name: amd64-microcode
      when: is_amd is successful

    - name: Configure amd64-microcode package
      template:
        src: amd64-microcode/default.j2
        dest: /etc/default/amd64-microcode
        owner: root
        group: root
        mode: '0644'
      register: amd_microcode
      when: is_amd is successful

    - name: Check if Intel processor
      command: grep -q GenuineIntel /proc/cpuinfo
      ignore_errors: true
      register: is_intel
      changed_when: false

    - name: Install intel-microcode package
      apt:
        name: intel-microcode
      when: is_intel is successful

    - name: Configure intel-microcode package
      template:
        src: intel-microcode/default.j2
        dest: /etc/default/intel-microcode
        owner: root
        group: root
        mode: '0644'
      register: intel_microcode
      when: is_intel is successful

    - name: Update initramfs for all kernels
      command: update-initramfs -uk all
      when: amd_microcode.changed or intel_microcode.changed
  when: ansible_virtualization_role == "NA"
