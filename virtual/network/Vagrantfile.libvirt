# -*- mode: ruby -*-
# vi: set ft=ruby :

# Copyright:: 2022 Bloomberg Finance L.P.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
require '../lib/util'

vagrant_box, vagrant_box_version = Util.get_vagrant_box()

def load_network
  # load the network topology
  network = './netplan/network.yaml'
  if File.file?(File.expand_path(network))
    YAML.load_file(File.expand_path(network))
  else
    raise "#{network} not found"
  end
end

FABRIC_ID = 'bcpc-'.freeze

PODS = if ENV.key?('BCC_POD_COUNT')
         ENV['BCC_POD_COUNT'].to_i
       else
         1
       end

# We assume that the number of planes & spines per pod are the same.
PLANES = 2
SPINES_PER_POD = PLANES
SUPERSPINES_PER_PLANE = 2
TORS_PER_POD = 3

def tor_name(pod, tor)
  FABRIC_ID + "pd#{pod}-sw#{tor}"
end

def spine_name(spine, pod)
  FABRIC_ID + "pl#{spine}-sp#{pod}"
end

def sspine_name(plane, sspine)
  FABRIC_ID + "pl#{plane}fs#{sspine}"
end

def add_private_network(config, name, ipaddr)
    netmask = IPAddr.new('255.255.255.255').to_s
    config.vm.network('private_network',
                      ip: ipaddr,
                      auto_config: false,
                      libvirt__network: netmask,
                      libvirt__network_name: Util.libvirt_prefix() + name,
                      libvirt__dhcp_enabled: false,
                      libvirt__forward_mode: 'veryisolated')
end

def configure_router_vm(config, name)
  config.vm.provider :libvirt do |lv|
    lv.default_prefix = Util.libvirt_prefix()
    if ENV['BCC_LIBVIRT_DRIVER'] == 'qemu'
      lv.driver = 'qemu'
      lv.cpu_mode = 'custom'
      config.vm.synced_folder './', '/vagrant', type: 'rsync'
    else
      lv.driver = 'kvm'
      lv.nested = true
      lv.cpu_mode = 'host-passthrough'
      if ENV['BCC_LIBVIRT_KVM_HUGEPAGES'] == 'true'
        lv.memorybacking :hugepages
      end
      config.vm.synced_folder './', '/vagrant', type: '9p'
    end
    lv.cpus = 1
    lv.memory = 512  # can work as low as 384
    lv.disk_bus = 'scsi'
    lv.disk_device = 'sda'
  end
end

Vagrant.configure(2) do |config|

  config.vm.box = vagrant_box
  config.vm.box_version = vagrant_box_version
  config.vm.box_download_insecure = true

  if ENV.key?('BCC_DEPLOY_NETWORK_VM')
    configure_router_vm(config, "network")
    config.vm.define 'network' do |node|
      node.vm.hostname = 'network'
      network = load_network
      (1..network['network']['ethernets'].length-1).each do |i|
        eth = "eth#{i}"
        a = network['network']['ethernets'][eth]['addresses'][0].split('/')
        netmask = IPAddr.new('255.255.255.255').mask(a[1]).to_s
        add_private_network(config, "management#{i}", a[0])
      end
      node.vm.provision 'shell', path: 'provisioner.sh', args: '-E network'
    end

  else

    DEFAULTIP = IPAddr.new('127.0.0.1').to_s
    # Create pods
    (1..PODS).each do |p|
      # Create TORs
      (1..TORS_PER_POD).each do |t|
        tor = tor_name(p, t)
        config.vm.define "#{tor}" do |node|
          configure_router_vm(node, "#{tor}")
          node.vm.hostname = "#{tor}"
          (1..SPINES_PER_POD).each do |s|
            spine = spine_name(s, p)
            add_private_network(node, spine + ':' + tor, DEFAULTIP)
          end
          # One management network per TOR. Reserve a TORS_PER_POD set of
          # such networks for a future second TOR per virtual rack.
          management = ((p - 1) * TORS_PER_POD * 2) + t
          add_private_network(node, "management#{management}", DEFAULTIP)
          node.vm.provision 'shell', path: 'provisioner.sh', args: "#{tor}"
        end
      end

      # Create spines
      (1..SPINES_PER_POD).each do |s|
        spine = spine_name(s, p)
        config.vm.define "#{spine}" do |node|
          configure_router_vm(node, "#{spine}")
          node.vm.hostname = "#{spine}"
          (1..TORS_PER_POD).each do |t|
            tor = tor_name(p, t)
            add_private_network(node, spine + ':' + tor, DEFAULTIP)
          end
          if PODS > 1
            # Create link to superspine on same plane as the spine value.
            (1..SUPERSPINES_PER_PLANE).each do |ss|
              sspine = sspine_name(s, ss)
              add_private_network(node, sspine + ':' + spine, DEFAULTIP)
            end
            on_edge = ''
          else
            on_edge = '-E'
          end
          node.vm.provision 'shell', path: 'provisioner.sh',
                                     args: "#{on_edge} #{spine}"
        end
      end
    end

    if PODS > 1
      # Create planes
      (1..PLANES).each do |pl|
        # Create superspines
        (1..SUPERSPINES_PER_PLANE).each do |ss|
          sspine = sspine_name(pl, ss)
          config.vm.define "#{sspine}" do |node|
            configure_router_vm(config, "#{sspine}")
            node.vm.hostname = "#{sspine}"
            (1..PODS).each do |p|
              spine = spine_name(pl, p)
              add_private_network(node, sspine + ':' + spine, DEFAULTIP)
            end
            node.vm.provision 'shell', path: 'provisioner.sh',
                                       args: "-E #{sspine}"
          end
        end
      end
    end
  end
end
