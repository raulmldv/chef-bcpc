# -*- mode: ruby -*-
# vi: set ft=ruby :

# Copyright:: 2021 Bloomberg Finance L.P.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
require 'yaml'
require './lib/util'

vagrant_box, vagrant_box_version = Util.get_vagrant_box()

def load_topology
  # load the vm topology profile
  topology = './topology/topology.yml'
  topology_overrides = './topology/topology.overrides.yml'

  if File.file?(File.expand_path(topology_overrides))
    YAML.load_file(File.expand_path(topology_overrides))
  elsif File.file?(File.expand_path(topology))
    YAML.load_file(File.expand_path(topology))
  else
    raise "#{topology} or #{topology_overrides} not found"
  end
end

def load_hardware
  # load the hardware profiles
  hardware = './topology/hardware.yml'
  hardware_overrides = './topology/hardware.overrides.yml'

  if File.file?(File.expand_path(hardware_overrides))
    YAML.load_file(File.expand_path(hardware_overrides))
  elsif File.file?(File.expand_path(hardware))
    YAML.load_file(File.expand_path(hardware))
  else
    raise "#{hardware} or #{hardware_overrides} not found"
  end
end


topology = load_topology
hardware = load_hardware

Vagrant.configure('2') do |config|
  config.ssh.forward_x11 = true
  config.vm.box = vagrant_box
  config.vm.box_version = vagrant_box_version
  config.vm.box_download_insecure = true

  config.vm.provider :libvirt do |lv|
    if ENV['BCC_LIBVIRT_DRIVER'] == 'qemu'
      lv.driver = 'qemu'
      lv.cpu_mode = 'custom'
      config.vm.synced_folder './', '/vagrant', type: 'rsync'
    else
      lv.driver = 'kvm'
      lv.nested = true
      lv.cpu_mode = 'host-passthrough'
      if ENV['BCC_LIBVIRT_KVM_HUGEPAGES'] == 'true'
        lv.memorybacking :hugepages
      end
      config.vm.synced_folder './', '/vagrant', type: '9p'
    end
  end

  topology['nodes'].each do |node|
    vm_name = node['host']

    # get hardware profile for node
    hw_profiles = hardware['profiles']
    hw_profile = hw_profiles[node['hardware_profile']]

    config.vm.define vm_name do |subconfig|
      # finish provisioner
      finish_args = []

      if hw_profile.key?('swap_gb')
        finish_args.append("--swap-size-gb #{hw_profile['swap_gb']}")
      end

      # operations user
      operations_user = 'operations'
      operations_user_ssh_pub_key = File.read('files/ssh/id_ed25519.pub')
      finish_args.append("--operations-user #{operations_user}")
      finish_args.append(
        "--operations-user-ssh-pub-key \"#{operations_user_ssh_pub_key}\""
      )

      subconfig.vm.provision 'shell' do |shell|
        shell.path = 'provisioners/finish.sh'
        shell.args = finish_args.join(' ')
      end

      # network connections
      host_vars = node['host_vars']
      transit = host_vars['interfaces']['transit']

      transit.each do |t_iface|
        args = {}.tap do |a|
          a[:auto_config] = false
          a[:ip] = t_iface['ip'].split('/')[0]
          a[:mac] = t_iface['mac'].delete(':')
          a[:libvirt__network_name] =
            Util.libvirt_prefix() + t_iface['neighbor']['name']
          a[:libvirt__dhcp_enabled] = false
          a[:libvirt__forward_mode] = 'veryisolated'
          a[:libvirt__mtu] = 9000
        end
        subconfig.vm.network('private_network', args)
      end

      subconfig.vm.provider :libvirt do |lv|
        lv.default_prefix = Util.libvirt_prefix()
        lv.cpus = hw_profile['cpus']
        lv.memory = hw_profile['ram_gb'] * 1024
        lv.disk_bus = 'scsi'
        lv.disk_device = 'sda'
        lv.machine_virtual_size = 10

        # add additional hard drives
        if hw_profile.key?('ext_disks')

          size_gb = hw_profile['ext_disks']['size_gb']
          count = hw_profile['ext_disks']['count']
          drive_letters = ('a'..'z').to_a[1..count]

          drive_letters.each do |l|
            device = "sd#{l}"
            lv.storage :file, size: "#{size_gb}G", device: device.to_s,
                                                   bus: 'scsi', type: 'raw'
          end
        end
      end
    end
  end
end
